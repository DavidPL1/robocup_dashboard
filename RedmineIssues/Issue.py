# automatically generated by the FlatBuffers compiler, do not modify

# namespace: RedmineIssues

import flatbuffers

class Issue(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsIssue(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Issue()
        x.Init(buf, n + offset)
        return x

    # Issue
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Issue
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # Issue
    def Asignee(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return bytes()

    # Issue
    def PercentDone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def IssueStart(builder): builder.StartObject(3)
def IssueAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def IssueAddAsignee(builder, asignee): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(asignee), 0)
def IssueAddPercentDone(builder, percentDone): builder.PrependInt16Slot(2, percentDone, 0)
def IssueEnd(builder): return builder.EndObject()
